# dev

```elixir
import IEx.Helpers
```

## init

```elixir
alias Helpdesk.Support
alias Helpdesk.Support.{Ticket, Representative}

require Ash.Query
```

<!-- livebook:{"branch_parent_index":0} -->

## Ash.DataLayer.Ets

```elixir
for i <- 0..5 do
  ticket =
    Helpdesk.Support.Ticket
    |> Ash.Changeset.for_create(:open, %{subject: "Issue #{i}"})
    |> Helpdesk.Support.create!()

  if rem(i, 2) == 0 do
    ticket
    |> Ash.Changeset.for_update(:close)
    |> Helpdesk.Support.update!()
  end
end
```

```elixir
recompile()
```

```elixir
Helpdesk.Support.Ticket
|> Ash.Query.filter(contains(subject, "2"))
|> Helpdesk.Support.read!()
```

```elixir
Helpdesk.Support.Ticket
|> Ash.Query.filter(status == :closed and not contains(subject, "4"))
|> Helpdesk.Support.read!()
```

```elixir
ticket =
  Helpdesk.Support.Ticket
  |> Ash.Changeset.for_create(:open, %{subject: "I can't find my hand!"})
  |> Helpdesk.Support.create!()
```

```elixir
representative =
  Helpdesk.Support.Representative
  |> Ash.Changeset.for_create(:create, %{name: "Joe Armstrong"})
  |> Helpdesk.Support.create!()
```

```elixir
ticket
|> Ash.Changeset.for_update(:assign, %{representative_id: representative.id})
|> Helpdesk.Support.update!()
```

```elixir
recompile()
```

```elixir
ticket
|> Ticket.分配!(representative.id)

# |> Ticket.close!()
```

<!-- livebook:{"branch_parent_index":0} -->

## AshPostgres.DataLayer

```elixir
# representative =
#   Helpdesk.Support.Representative
#   |> Ash.Changeset.for_create(:create, %{name: "Joe Armstrong"})
#   |> Helpdesk.Support.create!()
```

```elixir
# for i <- 0..5 do
#   ticket =
#     Helpdesk.Support.Ticket
#     |> Ash.Changeset.for_create(:open, %{subject: "Issue #{i}"})
#     |> Helpdesk.Support.create!()
#     |> Ash.Changeset.for_update(:assign, %{representative_id: representative.id})
#     |> Helpdesk.Support.update!()

#   if rem(i, 2) == 0 do
#     ticket
#     |> Ash.Changeset.for_update(:close)
#     |> Helpdesk.Support.update!()
#   end
# end
```

```elixir
if true do
  import Ash.Query

  Representative
  |> filter(like(name, "Joe %"))
  |> filter(exists(tickets, contains(subject, "0")))
  # |> Support.read!()
  |> data_layer_query()
  |> case do
    {:ok, ecto_query} ->
      # count the ecto query here
      ecto_query
      |> Helpdesk.Repo.aggregate(:count)
      |> case do
        count -> {:ok, count}
      end

    {:error, error} ->
      error
  end
end
```

<!-- livebook:{"branch_parent_index":0} -->

## yggdrasil_postgres

```elixir
# channel = [name: "pg_channel", adapter: :postgres, transformer: :json]
# Yggdrasil.subscribe(channel)
```

```elixir
# :ok = Yggdrasil.publish(channel, %{from: self() |> :erlang.pid_to_list() |> to_string()})
# Process.sleep(100)
# flush()
```

```elixir
recompile()

Subscriber
|> Process.whereis()

# |> Process.exit(:shutdown)
```

```elixir
:timer.tc(fn ->
  for i <- 1..1000, do: Subscriber.publish(%{n: i})
end)
```
